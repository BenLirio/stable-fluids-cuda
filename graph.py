import numpy as np
import matplotlib.pyplot as plt
import pickle

def graph_functions(timings):
  # Mostly generated by ChatGPT
  fields = ['ADVECT', 'DIFFUSE', 'PROJECT']
  categories = ['CPU', 'GPU']
  data = {
    'CPU': {
      'ADVECT': [],
      'DIFFUSE': [],
      'PROJECT': [],
    },
    'GPU': {
      'ADVECT': [],
      'DIFFUSE': [],
      'PROJECT': [],
    },
  }
  for timing in timings:
    cur = data
    if 'CPU' in timing['TAGS']:
      cur = cur['CPU']
    elif 'GPU' in timing['TAGS']:
      cur = cur['GPU']

    if 'ADVECT' in timing['TAGS']:
      cur = cur['ADVECT']
    elif 'DIFFUSE' in timing['TAGS']:
      cur = cur['DIFFUSE']
    elif 'PROJECT' in timing['TAGS']:
      cur = cur['PROJECT']
    
    cur.append(timing['VALUES']['TIME'])
  
  cpu = data['CPU']
  gpu = data['GPU']
  totals = [
    [ sum(cpu['ADVECT']), sum(cpu['DIFFUSE']), sum(cpu['PROJECT']) ],
    [ sum(gpu['ADVECT']), sum(gpu['DIFFUSE']), sum(gpu['PROJECT']) ],
  ]

  fig, ax = plt.subplots()

  bar_width = 0.25
  x1 = np.arange(len(fields))
  x2 = [x + bar_width for x in x1]
  bars = []
  bars1 = ax.bar(x1, totals[0], width=bar_width, label=categories[0])
  bars2 = ax.bar(x2, totals[1], width=bar_width, label=categories[1])

  ax.set_title('CPU vs GPU Timings')
  ax.set_xlabel('Function')
  ax.set_ylabel('Time (ms)')
  ax.set_xticks(x1 + bar_width / 2)
  ax.set_xticklabels(fields)
  ax.legend()

  def add_labels(bars):
      for bar in bars:
          height = bar.get_height()
          ax.annotate(
              f'{round(height, 2)}ms',
              xy=(bar.get_x() + bar.get_width() / 2, height),
              xytext=(0, 3),
              textcoords="offset points",
              ha='center',
              va='bottom'
          )

  add_labels(bars1)
  add_labels(bars2)

  plt.savefig('timings/functions.png')



def graph_change_in_n(timings):
  ns = list(set([ int(x['VALUES']['WIDTH']) for x in timings ]))
  ns.sort()
  n_map = {}
  for i in range(len(ns)):
    n_map[ns[i]] = i

  cpu_times = np.zeros(len(ns), dtype=float)
  kernel_times = np.zeros(len(ns), dtype=float)

  for timing in timings:
    n = int(timing['VALUES']['WIDTH'])
    idx = n_map[n]
    time = timing['VALUES']['TIME']
    if 'CPU' in timing['TAGS']:
      cpu_times[idx] += time
    if 'GPU' in timing['TAGS']:
      kernel_times[idx] += time

  fig, ax = plt.subplots()

  ax.set_title('CPU vs GPU Timings by N')
  ax.set_yscale('log')
  ax.set_xlabel('N')
  ax.set_ylabel('Time (ms)')
  ax.plot(ns, cpu_times, label='CPU')
  ax.plot(ns, kernel_times, label='Kernel')
  ax.grid(True, linestyle='--')

  ax.legend()
  fig.savefig('timings/change_in_n.png')

def graph_shared_memory(timings):
  ns = list(set([ int(x['VALUES']['WIDTH']) for x in timings ]))
  ns.sort()
  n_map = {}
  for i in range(len(ns)):
    n_map[ns[i]] = i

  naive_times = np.zeros(len(ns), dtype=float)
  shared_memory_times = np.zeros(len(ns), dtype=float)

  for timing in timings:
    n = int(timing['VALUES']['WIDTH'])
    idx = n_map[n]
    time = timing['VALUES']['TIME']
    if 'SHARED_MEMORY' in timing['TAGS']:
      shared_memory_times[idx] += time
    else:
      naive_times[idx] += time

  fig, ax = plt.subplots()

  ax.set_title('Using Shared Memory vs Naive')
  ax.set_yscale('log')
  ax.set_xlabel('N')
  ax.set_ylabel('Time (ms)')
  ax.plot(ns, naive_times, label='Naive')
  ax.plot(ns, shared_memory_times, label='Shared Memory')
  ax.grid(True, linestyle='--')

  ax.legend()
  fig.savefig('timings/shared_memory.png')


if __name__ == '__main__':
  with open('timings/timings.pkl', 'rb') as f:
    timings = pickle.load(f)
  graph_functions(timings)
  graph_change_in_n(timings)
  graph_shared_memory(timings)